@model IEnumerable<ManagementSystem.Models.Student>

@{
    ViewData["Title"] = "Admission Table";
}

@* <nav class="navbar py-3 mb-5" style="background: linear-gradient(to right, #1e3c72, #2a5298, #1e3c72, #2a5298, #1e3c72);">  *@

<nav class="navbar py-3 mb-5" style="background: linear-gradient(to right, #e0f7fa, #81d4fa, #0288d1, #01579b, #0288d1, #81d4fa, #e0f7fa);">

    <div class="container-fluid d-flex justify-content-center align-items-center">
        <a href="/" class="navbar-brand">
            <img src="~/Image/Picsart_24-12-07_18-34-26-772 (2).png" style="width:80px;" alt="Logo" />
        </a>
        <h1 class="display-4 fw-bold mx-auto text-center text-white sticky-top">Admission Table</h1>


    </div>
</nav>

<div class="container-fluid mt-5">

    <div class="container-fluid my-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <!-- Search Filter -->
            <div class="text-end">
                <form method="get" class="row g-2">
                    <div class="col-auto">
                        <label for="fromDate" class="form-label">From Date:</label>
                        <input type="date" id="fromDate" name="fromDate" class="form-control form-control-sm" />
                    </div>
                    <div class="col-auto">
                        <label for="toDate" class="form-label">To Date:</label>
                        <input type="date" id="toDate" name="toDate" class="form-control form-control-sm" />
                    </div>
                    <div class="col-auto d-flex align-items-end">
                        <button type="submit" class="btn btn-primary btn-sm">Search</button>
                    </div>
                </form>
            </div>

            <!-- Date Filter -->
            

            <div>
                <h4 class="d-flex">Total Admission: @Model.Count()</h4>
                <form asp-controller="Admission" asp-action="AdmissionTable" method="get" class="d-flex">
                    <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control form-control-sm me-2" placeholder="Search" />
                    <button type="submit" class="btn btn-primary btn-sm">Search</button>
                </form>
            </div>
        </div>

        

        <!-- Action Buttons (Initially Hidden) -->

        <div class="mb-3 d-flex justify-content-between" id="actionButtons" style="display: none;">
            <!-- Left Side: Create New and Back Page buttons -->
            <div class="d-flex gap-3">
                <a asp-action="Create" class="btn btn-success btn-sm">Create New</a>
                <a asp-action="Dashboard" asp-controller="Home" class="btn btn-secondary btn-sm">Back Page</a>
            </div>

            <!-- Right Side: Edit, Details, Delete, WhatsApp, and Message buttons -->
            <div class="d-flex gap-3">
                <button id="editBtn" class="btn btn-warning btn-sm" disabled>
                    <i class="fas fa-edit"></i> Edit</button>
                
                <button id="detailsBtn" class="btn btn-info btn-sm" disabled>
                    <i class="fas fa-info-circle"></i> Details
                </button>
               
               @*  <button id="deleteBtn" class="btn btn-danger btn-sm" disabled>
                    <i class="fas fa-trash"></i> Delete
                </button> *@

                <!-- WhatsApp Button -->
                <button id="whatsappButton" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                    <i class="fab fa-whatsapp"></i> WhatsApp
                </button>

                <!-- Message Button -->
                <button id="messageButton" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#selectStudentModal">
                    <i class="fas fa-comment"></i> Message
                </button>
            </div>
        </div>

      <!-- Scrollable Table Container -->
        <div class="table-responsive" style="max-height: 400px; overflow: auto; border: 1px solid #ccc; margin: 20px; overflow-x: auto;" >
    <table class="table table-striped table-hover table-bordered" id="studentTable" style="min-width: 300px;">
        <thead class="bg-primary text-white sticky-lg-top">
            
            <tr>
                <th>@Html.DisplayNameFor(model => model.Name)</th>
                @* <th>@Html.DisplayNameFor(model => model.Gender)</th> *@
                <th>@Html.DisplayNameFor(model => model.ContactNo)</th>
                <th>@Html.DisplayNameFor(model => model.Email)</th>
               @*  <th>@Html.DisplayNameFor(model => model.ParentName)</th> *@
                <th>@Html.DisplayNameFor(model => model.ParentContactNo)</th>
                @* <th>@Html.DisplayNameFor(model => model.CurrentAddress)</th>
                <th>@Html.DisplayNameFor(model => model.PermanentAddress)</th>
                <th>@Html.DisplayNameFor(model => model.City)</th>
                <th>@Html.DisplayNameFor(model => model.Qualification)</th>
                <th>@Html.DisplayNameFor(model => model.PreviousSchoolClg)</th>
                <th>@Html.DisplayNameFor(model => model.Marks)</th> *@
                <th>@Html.DisplayNameFor(model => model.Course)</th>
                        <th>@Html.DisplayNameFor(model => model.BatchTime)</th>
                @* <th>@Html.DisplayNameFor(model => model.AdmissionDate)</th>
                <th>@Html.DisplayNameFor(model => model.RegistrationFees)</th>
                <th>@Html.DisplayNameFor(model => model.PaymentMode)</th>
                <th>@Html.DisplayNameFor(model => model.TransactionId)</th> *@
                @* <th>@Html.DisplayNameFor(model => model.CourseFees)</th> *@

                <th>@Html.DisplayNameFor(Model=>Model.DiscountedCourseFees)</th>
                        <th>@Html.DisplayNameFor(model => model.ReceiveAmount)</th>
                <th>@Html.DisplayNameFor(model => model.PendingAmount)</th>
                @* <th>@Html.DisplayNameFor(model => model.Installment)</th> *@
                
            </tr>
        </thead>
        <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="selectable-row" data-id="@item.Id" data-name="@item.Name">
                            <td>@Html.DisplayFor(modelItem => item.Name)</td>
                            @* <td>@Html.DisplayFor(modelItem => item.Gender)</td> *@
                            <td>@Html.DisplayFor(modelItem => item.ContactNo)</td>
                             <td>@Html.DisplayFor(modelItem => item.Email)</td>
                            @*<td>@Html.DisplayFor(modelItem => item.ParentName)</td> *@
                            <td>@Html.DisplayFor(modelItem => item.ParentContactNo)</td>
                            @* <td>@Html.DisplayFor(modelItem => item.CurrentAddress)</td>
                            <td>@Html.DisplayFor(modelItem => item.PermanentAddress)</td>
                            <td>@Html.DisplayFor(modelItem => item.City)</td>
                            <td>@Html.DisplayFor(modelItem => item.Qualification)</td>
                            <td>@Html.DisplayFor(modelItem => item.PreviousSchoolClg)</td>
                            <td>@Html.DisplayFor(modelItem => item.Marks)</td> *@
                            <td>@Html.DisplayFor(modelItem => item.Course)</td>
                            <td>@Html.DisplayFor(modelItem => item.BatchTime)</td>
                           @*  <td>@Html.DisplayFor(modelItem => item.AdmissionDate)</td>
                            <td>@Html.DisplayFor(modelItem => item.RegistrationFees)</td>
                            <td>@Html.DisplayFor(modelItem => item.PaymentMode)</td>
                            <td>@Html.DisplayFor(modelItem => item.TransactionId)</td> *@
                            <td class="text-success fw-bold">@Html.DisplayFor(modelItem => item.DiscountedCourseFees)/-</td>
                            <td class="text-success fw-bold">@Html.DisplayFor(modelItem => item.ReceiveAmount)/-</td>
                            <td class="text-danger fw-bold">@Html.DisplayFor(modelItem => item.PendingAmount)/-</td>
                           @*  <td>@Html.DisplayFor(modelItem => item.Installment)</td> *@
                            
                        </tr>
                    }
        </tbody>
                <tfoot class="table-secondary sticky-bottom">
                    <tr>
                       
                        <!-- Total Row with aligned columns -->
                        <td colspan="7" class="text-end fw-bold bg-light">
                            <span class="text-primary">Total:</span>
                        </td>
                        <td class="text-success fw-bold bg-light">
                            ₹@ViewData["totalCollection"]
                        </td>
                        <td class="text-danger fw-bold bg-light">
                            ₹@ViewData["totalPending"]
                        </td>
                    </tr>
                </tfoot>



    </table>
</div>



<!-- Bootstrap Modal for Confirmation -->
<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalMessage">
                <!-- The student's name will be inserted here dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmBtn">Confirm</button>
            </div>
        </div>
    </div>
    </div>
    </div>
    
</div>

<!-- CSS for Sticky Action Buttons -->
<style>
    .sticky-bottom {
        position: sticky;
        bottom: 0;
        z-index: 2;
        background-color: #f8f9fa; /* Light background for visibility */
    }
    .table-responsive{
        position:relative;
    }

    .d-flex.gap-2 {
        margin-bottom: 20px;
    }

    .table th, .table td {
        white-space: nowrap;
    }

    .selectable-row {
        cursor: pointer;
    }

        .selectable-row:hover {
            background-color: #f0f0f0;
        }

   /*  .selected-row {
        background-color: #cce5ff; /* Light blue background for selected row */
    

    
    body {
        background: linear-gradient(to bottom, #a5d6a7, #e1f5fe, #b2ebf2, #a5d6a7);

        /*background: linear-gradient(to right, #e8f5e9, #f0f4c3, #fff9c4, #ffffff);*/
    }

    .selected-row {
        background-color: #f0f8ff; /* Light blue for selection */
        font-weight: bold;
    }


</style>

@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let selectedRow = null;
        let selectedStudentId = null;
        let selectedStudentName = null;

        document.addEventListener('DOMContentLoaded', () => {
            const rows = document.querySelectorAll('.selectable-row');
            const actionButtons = document.querySelectorAll('#editBtn, #detailsBtn, #deleteBtn');

            // Disable action buttons by default
            actionButtons.forEach(button => button.disabled = true);

            // Add click event listeners to all rows
            rows.forEach(row => {
                row.addEventListener('click', () => {
                    // If the same row is clicked again, deselect it
                    if (selectedRow === row) {
                        deselectRow();
                        return;
                    }

                    // Deselect the previous row (if any)
                    if (selectedRow) {
                        selectedRow.classList.remove('selected-row');
                    }

                    // Select the clicked row
                    selectedRow = row;
                    selectedRow.classList.add('selected-row');

                    // Enable action buttons
                    actionButtons.forEach(button => button.disabled = false);

                    // Store selected row details
                    selectedStudentId = selectedRow.getAttribute('data-id');
                    selectedStudentName = selectedRow.getAttribute('data-name');
                });
            });

            // Function to deselect the current row
            function deselectRow() {
                if (selectedRow) {
                    selectedRow.classList.remove('selected-row');
                    selectedRow = null;
                    selectedStudentId = null;
                    selectedStudentName = null;

                    // Disable action buttons when no row is selected
                    actionButtons.forEach(button => button.disabled = true);
                }
            }

            // Handle action confirmation
            function confirmAction(action) {
                if (!selectedRow) {
                    alert("Please select a student before performing this action.");
                    return;
                }

                const modalMessage = document.getElementById('modalMessage');
                let confirmationText = '';

                // Set confirmation message based on action type
                if (action === 'edit') {
                    confirmationText = `Are you sure you want to edit the details of student "${selectedStudentName}"?`;
                } else if (action === 'details') {
                    confirmationText = `Are you sure you want to view the details of student "${selectedStudentName}"?`;
                } else if (action === 'delete') {
                    confirmationText = `Are you sure you want to delete the student "${selectedStudentName}"? This action cannot be undone.`;
                }

                modalMessage.textContent = confirmationText;
                $('#confirmationModal').modal('show');

                // Handle confirmation action
                document.querySelector('#confirmBtn').onclick = () => {
                    if (action === 'edit') {
                        window.location.href = `/Admission/Edit/${selectedStudentId}`;
                    } else if (action === 'details') {
                        window.location.href = `/Admission/Details/${selectedStudentId}`;
                    } else if (action === 'delete') {
                        window.location.href = `/Admission/Delete/${selectedStudentId}`;
                    }
                    $('#confirmationModal').modal('hide');
                };
            }

            // Attach click event listeners to action buttons
            document.querySelector('#editBtn').addEventListener('click', () => confirmAction('edit'));
            document.querySelector('#detailsBtn').addEventListener('click', () => confirmAction('details'));
            document.querySelector('#deleteBtn').addEventListener('click', () => confirmAction('delete'));

            // WhatsApp button functionality
            document.querySelector('#whatsappButton').addEventListener('click', () => {
                if (!selectedRow) {
                    alert("Please select a student before performing this action.");
                    return;
                }

                const phoneNumber = selectedRow.querySelector('td:nth-child(3)').textContent.trim();
                const message = `Hello ${selectedStudentName}, this is a message from our Admission Team.`;
                const encodedMessage = encodeURIComponent(message);

                window.open(`https://wa.me/${phoneNumber}?text=${encodedMessage}`, '_blank');
            });

            // Message button functionality
            document.querySelector('#messageButton').addEventListener('click', () => {
                if (!selectedRow) {
                    alert("Please select a student before performing this action.");
                    return;
                }

                const phoneNumber = selectedRow.querySelector('td:nth-child(3)').textContent.trim();
                const message = `Hello ${selectedStudentName}, this is a reminder from our Admission Team.`;

                const messageUrl = `/Admission/SendMessage?phone=${phoneNumber}&message=${encodeURIComponent(message)}`;
                window.location.href = messageUrl;
            });
        });
    </script>




}
